//
// Info.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Info: Codable {

    public var address: String?
    public var cap: String?
    public var floor: String?
    public var id: String?
    public var instanceId: String?
    public var latitude: Double?
    public var location: String?
    public var longitude: Double?
    public var major: Int?
    public var minor: Int?
    public var name: String?
    public var namespace: String?
    public var uuid: UUID?
    public var website: String?


    
    public init(address: String?, cap: String?, floor: String?, id: String?, instanceId: String?, latitude: Double?, location: String?, longitude: Double?, major: Int?, minor: Int?, name: String?, namespace: String?, uuid: UUID?, website: String?) {
        self.address = address
        self.cap = cap
        self.floor = floor
        self.id = id
        self.instanceId = instanceId
        self.latitude = latitude
        self.location = location
        self.longitude = longitude
        self.major = major
        self.minor = minor
        self.name = name
        self.namespace = namespace
        self.uuid = uuid
        self.website = website
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(address, forKey: "address")
        try container.encodeIfPresent(cap, forKey: "cap")
        try container.encodeIfPresent(floor, forKey: "floor")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(instanceId, forKey: "instanceId")
        try container.encodeIfPresent(latitude, forKey: "latitude")
        try container.encodeIfPresent(location, forKey: "location")
        try container.encodeIfPresent(longitude, forKey: "longitude")
        try container.encodeIfPresent(major, forKey: "major")
        try container.encodeIfPresent(minor, forKey: "minor")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(namespace, forKey: "namespace")
        try container.encodeIfPresent(uuid, forKey: "uuid")
        try container.encodeIfPresent(website, forKey: "website")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        address = try container.decodeIfPresent(String.self, forKey: "address")
        cap = try container.decodeIfPresent(String.self, forKey: "cap")
        floor = try container.decodeIfPresent(String.self, forKey: "floor")
        id = try container.decodeIfPresent(String.self, forKey: "id")
        instanceId = try container.decodeIfPresent(String.self, forKey: "instanceId")
        latitude = try container.decodeIfPresent(Double.self, forKey: "latitude")
        location = try container.decodeIfPresent(String.self, forKey: "location")
        longitude = try container.decodeIfPresent(Double.self, forKey: "longitude")
        major = try container.decodeIfPresent(Int.self, forKey: "major")
        minor = try container.decodeIfPresent(Int.self, forKey: "minor")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        namespace = try container.decodeIfPresent(String.self, forKey: "namespace")
        uuid = try container.decodeIfPresent(UUID.self, forKey: "uuid")
        website = try container.decodeIfPresent(String.self, forKey: "website")
    }
}

